import { getCanvas, getGame } from '../settings';

/**
 * Simple helpers for querying aspects of foundry
 */
export default class FoundryHelpers {
  constructor() {
    //   this._settings = new Settings();
  }

  /**
   * Gets all UUIDs for selected or targeted tokens, depending on if priortize
   * targets is enabled
   *
   * @returns {string[]} actor uuids for selected or targeted tokens
   */
  getActorUuidsFromCanvas() {
    if (getCanvas().tokens?.controlled.length == 0 && getGame().user?.targets.size == 0) {
      return [];
    }

    // if (this._settings.prioritizeTargets && getGame().user?.targets.size !== 0) {
    if (getGame().user?.targets.size !== 0) {
      return Array.from(<UserTargets>getGame().user?.targets).map((token) => token.actor?.uuid);
    } else {
      return getCanvas().tokens?.controlled.map((token) => token.actor?.uuid);
    }
  }

  /**
   * Gets the actor object by the actor UUID
   *
   * @param {string} uuid - the actor UUID
   * @returns {Actor5e} the actor that was found via the UUID
   */
  async getActorByUuid(uuid) {
    const actorToken = <TokenDocument>await fromUuid(uuid);
    const actor = actorToken?.actor ? actorToken?.actor : actorToken;
    return actor;
  }

  // renderConvenientEffectsAppIfOpen() {
  //   const openApps = Object.values(ui.windows);
  //   const convenientEffectsApp = openApps.find(
  //     (app) => app instanceof ConvenientEffectsApp
  //   );

  //   if (convenientEffectsApp) {
  //     convenientEffectsApp.render();
  //   }
  // }
}
